C51 COMPILER V9.02   PWM                                                                   07/24/2021 16:55:38 PAGE 1   


C51 COMPILER V9.02, COMPILATION OF MODULE PWM
OBJECT MODULE PLACED IN .\Obj\PWM.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE PWM.c LARGE OMF2 ROM(COMPACT) BROWSE DEBUG PRINT(.\Obj\PWM.lst) OBJECT(.\Ob
                    -j\PWM.obj)

line level    source

   1          #include "include.h"
   2          
   3          
   4                                  
   5          uint16 xdata ServoPwmDuty[8] = {1500,1500,1500,1500,1500,1500,1500,1500};       //PWM脉冲宽度
   6          uint16 ServoPwmDutySet[8] = {1500,1500,1500,1500,1500,1500,1500,1500};  //PWM脉冲宽度
   7          float xdata ServoPwmDutyInc[8];         //为了速度控制，当PWM脉宽发生变化时，每2.5ms或20ms递增的PWM脉宽
   8          
   9          bool ServoPwmDutyHaveChange = FALSE;    //脉宽有变化标志位
  10          
  11          uint16 ServoTime = 2000;                        //舵机从当前角度运动到指定角度的时间，也就是控制速度
  12          
  13          
  14          void ServoSetPluseAndTime(uint8 id,uint16 p,uint16 time)
  15          {
  16   1              if(id >= 0 && id <= 7 && p >= 500 && p <= 2500)
  17   1              {
  18   2                      if(time < 20)
  19   2                              time = 20;
  20   2                      if(time > 30000)
  21   2                              time = 30000;
  22   2      
  23   2                      ServoPwmDutySet[id] = p;
  24   2                      ServoTime = time;
  25   2                      ServoPwmDutyHaveChange = TRUE;
  26   2              }
  27   1      }
  28          
  29          
  30          void ServoPwmDutyCompare(void)//脉宽变化比较及速度控制
  31          {
  32   1              uint8 i;
  33   1              
  34   1              static uint16 ServoPwmDutyIncTimes;     //需要递增的次数
  35   1              static bool ServoRunning = FALSE;       //舵机正在以指定速度运动到指定的脉宽对应的位置
  36   1              if(ServoPwmDutyHaveChange)//停止运动并且脉宽发生变化时才进行计算      ServoRunning == FALSE && 
  37   1              {
  38   2                      ServoPwmDutyHaveChange = FALSE;
  39   2                      ServoPwmDutyIncTimes = ServoTime/20;    //当每20ms调用一次ServoPwmDutyCompare()函数时用此句
  40   2                      for(i=0;i<8;i++)
  41   2                      {
  42   3                              //if(ServoPwmDuty[i] != ServoPwmDutySet[i])
  43   3                              {
  44   4                                      if(ServoPwmDutySet[i] > ServoPwmDuty[i])
  45   4                                      {
  46   5                                              ServoPwmDutyInc[i] = ServoPwmDutySet[i] - ServoPwmDuty[i];
  47   5                                              ServoPwmDutyInc[i] = -ServoPwmDutyInc[i];
  48   5                                      }
  49   4                                      else
  50   4                                      {
  51   5                                              ServoPwmDutyInc[i] = ServoPwmDuty[i] - ServoPwmDutySet[i];
  52   5                                              
  53   5                                      }
  54   4                                      ServoPwmDutyInc[i] /= ServoPwmDutyIncTimes;//每次递增的脉宽
C51 COMPILER V9.02   PWM                                                                   07/24/2021 16:55:38 PAGE 2   

  55   4                              }
  56   3                      }
  57   2                      ServoRunning = TRUE;    //舵机开始动作
  58   2              }
  59   1              if(ServoRunning)
  60   1              {
  61   2                      ServoPwmDutyIncTimes--;
  62   2                      for(i=0;i<8;i++)
  63   2                      {
  64   3                              if(ServoPwmDutyIncTimes == 0)
  65   3                              {               //最后一次递增就直接将设定值赋给当前值
  66   4      
  67   4                                      ServoPwmDuty[i] = ServoPwmDutySet[i];
  68   4      
  69   4                                      ServoRunning = FALSE;   //到达设定位置，舵机停止运动
  70   4                              }
  71   3                              else
  72   3                              {
  73   4      
  74   4                                      ServoPwmDuty[i] = ServoPwmDutySet[i] + 
  75   4                                              (signed short int)(ServoPwmDutyInc[i] * ServoPwmDutyIncTimes);
  76   4      
  77   4                              }
  78   3                      }
  79   2                      
  80   2              }
  81   1      }
  82          
  83          
  84          
  85          void InitTimer0(void)
  86          {
  87   1      //      AUXR &= 0x7F;           //定时器时钟12T模式
  88   1      //      AUXR |= 0x00;           //T0,T1工作在12T
  89   1              TMOD &= 0xF0;           //设置定时器模式
  90   1              TMOD |= 0x01;           //设置定时器模式
  91   1              TL0 = 0x00;                     //设置定时初值
  92   1              TH0 = 0x00;                     //设置定时初值
  93   1              TF0 = 0;                        //清除TF0标志
  94   1              TR0 = 1;                        //定时器0开始计时
  95   1              ET0 = 1;                        //开定时器0中断
  96   1      
  97   1              PT0 = 1;
  98   1      }
  99          
 100          
 101          void InitPWM(void)
 102          {
 103   1              InitTimer0();
 104   1              P2M0 |= 0x10;   //设置推挽输出
 105   1              P3M0 |= 0x7C;
 106   1              P5M0 |= 0x30;
 107   1      }
 108          
 109          void Timer0Value(uint16 pwm)
 110          {
 111   1              uint16 value;
 112   1              value=0xffff-pwm;
 113   1              TR0 = 0;                        //
 114   1              TL0=value;                      //16位数据给8位数据赋值默认将16位数据的低八位直接赋给八位数据
 115   1          TH0=value>>8;               //将16位数据右移8位，也就是将高8位移到低八位，再赋值给8位数据
 116   1          TR0 = 1;                    //定时器0开始计时
C51 COMPILER V9.02   PWM                                                                   07/24/2021 16:55:38 PAGE 3   

 117   1      }
 118          
 119          
 120          
 121          
 122          
 123          void Timer0_isr(void) interrupt 1// using 1
 124          {
 125   1              static uint16 i = 1;    //静态变量：每次调用函数时保持上一次所赋的值，
 126   1                                                              //跟全局变量类似，不同是它只能用于此函数内部
 127   1              switch(i)
 128   1              {
 129   2                      case 1:
 130   2      //                      SERVO0 = 1;     //PWM控制脚高电平
 131   2                              //给定时器0赋值，计数Pwm0Duty个脉冲后产生中断，下次中断会进入下一个case语句
 132   2                              Timer0Value(ServoPwmDuty[0]);   
 133   2                              break;
 134   2                      case 2:
 135   2      //                      SERVO0 = 0;     //PWM控制脚低电平
 136   2                              //此计数器赋值产生的中断表示下一个单元要进行任务的开始
 137   2                              Timer0Value(2500-ServoPwmDuty[0]);      
 138   2                              break;
 139   2                      case 3:
 140   2                              SERVO1 = 1;     
 141   2                              Timer0Value(ServoPwmDuty[1]);   
 142   2                              break;
 143   2                      case 4:
 144   2                              SERVO1 = 0;     //PWM控制脚低电平
 145   2                              Timer0Value(2500-ServoPwmDuty[1]);      
 146   2                              break;
 147   2                      case 5:
 148   2                              SERVO2 = 1;     
 149   2                              Timer0Value(ServoPwmDuty[2]);   
 150   2                              break;
 151   2                      case 6:
 152   2                              SERVO2 = 0;     //PWM控制脚低电平
 153   2                              Timer0Value(2500-ServoPwmDuty[2]);      
 154   2                              break;  
 155   2                      case 7:
 156   2                              SERVO3 = 1;     
 157   2                              Timer0Value(ServoPwmDuty[3]);   
 158   2                              break;
 159   2                      case 8:
 160   2                              SERVO3 = 0;     //PWM控制脚低电平
 161   2                              Timer0Value(2500-ServoPwmDuty[3]);      
 162   2                              break;  
 163   2                      case 9:
 164   2                              SERVO4 = 1;     
 165   2                              Timer0Value(ServoPwmDuty[4]);   
 166   2                              break;
 167   2                      case 10:
 168   2                              SERVO4 = 0;     //PWM控制脚低电平
 169   2                              Timer0Value(2500-ServoPwmDuty[4]);      
 170   2                              break;  
 171   2                      case 11:
 172   2                              SERVO5 = 1;     
 173   2                              Timer0Value(ServoPwmDuty[5]);   
 174   2                              break;
 175   2                      case 12:
 176   2                              SERVO5 = 0;     //PWM控制脚低电平
 177   2                              Timer0Value(2500-ServoPwmDuty[5]);      
 178   2                              break;
C51 COMPILER V9.02   PWM                                                                   07/24/2021 16:55:38 PAGE 4   

 179   2                      case 13:
 180   2                              SERVO6 = 1;     
 181   2                              Timer0Value(ServoPwmDuty[6]);   
 182   2                              break;
 183   2                      case 14:
 184   2                              SERVO6 = 0;     //PWM控制脚低电平
 185   2                              Timer0Value(2500-ServoPwmDuty[6]);      
 186   2                              break;
 187   2                      case 15:
 188   2      //                      SERVO7 = 1;     
 189   2                              Timer0Value(ServoPwmDuty[7]);   
 190   2                              break;
 191   2                      case 16:
 192   2      //                      SERVO7 = 0;     //PWM控制脚低电平
 193   2                              Timer0Value(2500-ServoPwmDuty[7]);
 194   2                              i = 0;  
 195   2                              break;                           
 196   2              }
 197   1              i++;
 198   1      }
 199          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    909    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     70       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
